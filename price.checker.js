import {Telegraf} from "telegraf";
import axios from "axios";
import dotenv from "dotenv";
dotenv.config({path: './config/api.env'});

const BOT_TOKEN = process.env.BOT_TOKEN; 
const bot = new Telegraf(BOT_TOKEN);

// URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ —á–µ—Ä–µ–∑ CoinMarketCap API
const COINMARKETCAP_URL = 'https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest';
const COINMARKETCAP_API_KEY = process.env.CMC_API_KEY;
console.log(BOT_TOKEN, COINMARKETCAP_API_KEY);

function formatPrice(value) {
    if (value >= 1) {
        return new Intl.NumberFormat('en-US', {
            minimumFractionDigits: 2,
            maximumFractionDigits: 2
        }).format(value);
    }
    else if (value >= 0.00001) {
        return new Intl.NumberFormat('en-US', {
            minimumFractionDigits: 6,
            maximumFractionDigits: 6
        }).format(value);
    }
    else {
        return new Intl.NumberFormat('en-US', {
            minimumFractionDigits: 5,
            maximumFractionDigits: 5
        }).format(value);
    }
}

export function setupPriceCommands(bot) {
    bot.command('price', async (ctx) => {
        const args = ctx.message.text.split(' ').slice(1);
        if (args.length === 0) {
            return ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price SYMBOL\n–ù–∞–ø—Ä–∏–º–µ—Ä: /price BTC');
        }

        const symbol = args[0].toUpperCase();

        try {
            const response = await axios.get(COINMARKETCAP_URL, {
                params: { symbol: symbol },
                headers: { 'X-CMC_PRO_API_KEY': COINMARKETCAP_API_KEY }
            });

            if (response.data.data && response.data.data[symbol]) {
                const price = response.data.data[symbol].quote.USD.price;
                const formattedPrice = formatPrice(price);
                
                ctx.reply(`–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ${symbol}: $${formattedPrice}`);
            } else {
                ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ ${symbol}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CoinMarketCap:', error);
            ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª—é—Ç–µ üòî. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
}